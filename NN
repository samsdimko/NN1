from __future__ import absolute_import, division, print_function, unicode_literals

import tensorflow as tf
import os
AUTOTUNE = tf.data.experimental.AUTOTUNE

import pathlib
from pathlib import Path

data_root = Path("/home/dmirty/images/images")

print(data_root)


for item in data_root.iterdir():
    print(item)
    

import random
all_image_paths = list(data_root.glob('*/*'))
all_image_paths = [str(path) for path in all_image_paths]
random.shuffle(all_image_paths)

image_count = len(all_image_paths)

import os

label_names = sorted(item.name for item in data_root.glob('*/') if item.is_dir())
label_to_index = dict((name, index) for index, name in enumerate(label_names))
label_to_index

all_image_labels = [label_to_index[pathlib.Path(path).parent.name]
                    for path in all_image_paths]


img_path = all_image_paths[0]
img_raw = tf.io.read_file(img_path)

img_tensor = tf.image.decode_image(img_raw)

print(img_tensor.shape)
print(img_tensor.dtype)


img_final = tf.image.resize(img_tensor, [150, 150])
img_final = img_final/255.0
print(img_final.shape)
print(img_final.numpy().min())
print(img_final.numpy().max())


def preprocess_image(image):
    image = tf.image.decode_jpeg(image, channels=3)
    image = tf.image.resize(image, [150, 150])
    image /= 255.0 

    return image


def load_and_preprocess_image(path):
    image = tf.io.read_file(path)
    return preprocess_image(image)


import matplotlib.pyplot as plt

image_path = all_image_paths[0]
label = all_image_labels[0]

plt.imshow(load_and_preprocess_image(img_path))
plt.grid(False)
plt.xlabel(img_path)
plt.title(label_names[label].title())

path_ds = tf.data.Dataset.from_tensor_slices(all_image_paths)
print(path_ds)

image_ds = path_ds.map(load_and_preprocess_image, num_parallel_calls=AUTOTUNE)


import matplotlib.pyplot as plt

plt.figure(figsize=(8,8))



label_ds = tf.data.Dataset.from_tensor_slices(tf.cast(all_image_labels, tf.int64))

for label in label_ds.take(10):
    print(label_names[label.numpy()])


image_label_ds = tf.data.Dataset.zip((image_ds, label_ds))
print(image_label_ds)


ds = tf.data.Dataset.from_tensor_slices((all_image_paths, all_image_labels))

def load_and_preprocess_from_path_label(path, label):
    return load_and_preprocess_image(path), label

image_label_ds = ds.map(load_and_preprocess_from_path_label)
image_label_ds

BATCH_SIZE = 10


ds = image_label_ds.shuffle(buffer_size=image_count)
ds = ds.repeat()
ds = ds.batch(BATCH_SIZE)
ds = ds.prefetch(buffer_size=AUTOTUNE)
ds


ds = image_label_ds.apply(tf.data.experimental.shuffle_and_repeat(buffer_size=image_count))
ds = ds.batch(BATCH_SIZE)
ds = ds.prefetch(buffer_size=AUTOTUNE)
ds


def change_range(image,label):
  return 2*image-1, label

mobile_net = tf.keras.applications.MobileNetV2(input_shape=(150, 150, 3), include_top=False)
mobile_net.trainable=False


keras_ds = ds.map(change_range)
image_batch, label_batch = next(iter(keras_ds))
model = tf.keras.Sequential([
  mobile_net,
  tf.keras.layers.GlobalAveragePooling2D(),
  tf.keras.layers.Dense(len(label_names), activation = 'softmax')])
logit_batch = model(image_batch).numpy()
model.compile(optimizer=tf.keras.optimizers.Adam(),
              loss='sparse_categorical_crossentropy',
              metrics=["accuracy"])
model.summary()
steps_per_epoch=tf.math.ceil(len(all_image_paths)/BATCH_SIZE).numpy()
steps_per_epoch


history = model.fit(ds, epochs=50, steps_per_epoch=10)


import logging
logging.getLogger().setLevel(logging.INFO)